import { renderHook, act } from '@testing-library/react-hooks';
import { PropsWithChildren } from 'react';

import {{pascalCase name}}, { use{{pascalCase name}} } from './index';

import {{pascalCase name}}, { use{{pascalCase name}} } from './index';

describe('use{{pascalCase name}} hook', () => {
it('should initialize with default value', () => {
const wrapper = ({ children }: PropsWithChildren<object>) => <{{pascalCase name}}>{children}</{{pascalCase name}}>;
    const { result } = renderHook(() => use{{pascalCase name}}(), { wrapper });

    expect(result.current.value).toBe(0); // replace 0 with your expected default value
    });

    // Assuming use{{pascalCase name}} has an increment function
    it('should increment value', () => {
    const wrapper = ({ children }: PropsWithChildren<object>) => <{{pascalCase name}}>{children}</{{pascalCase name}}>;
        const { result } = renderHook(() => use{{pascalCase name}}(), { wrapper });

        act(() => {
        result.current.increment(); // replace increment with your actual function name
        });

        expect(result.current.value).toBe(1); // replace 1 with your expected value after increment
        });

        // Assuming use{{pascalCase name}} has a decrement function
        it('should decrement value', () => {
        const wrapper = ({ children }: PropsWithChildren<object>) => <{{pascalCase name}}>{children}</{{pascalCase
                name}}>;
            const { result } = renderHook(() => use{{pascalCase name}}(), { wrapper });

            act(() => {
            result.current.decrement(); // replace decrement with your actual function name
            });

            expect(result.current.value).toBe(-1); // replace -1 with your expected value after decrement
            });
            });